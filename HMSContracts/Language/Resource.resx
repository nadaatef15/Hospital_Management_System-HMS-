<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="appointmentDoesnotExist" xml:space="preserve">
    <value>The appointment does not exist</value>
  </data>
  <data name="DochasScheduleInThisDate" xml:space="preserve">
    <value>The Doctor has already Schedule in the same Date</value>
  </data>
  <data name="EmailNotFound" xml:space="preserve">
    <value>This Email does not exist</value>
  </data>
  <data name="EmailUsedBefore" xml:space="preserve">
    <value>This Email is used before</value>
  </data>
  <data name="invalidAppointment" xml:space="preserve">
    <value>This Appointment is used in MedicalRecord You can not delete it</value>
  </data>
  <data name="MedicalRecordDoesnotExist" xml:space="preserve">
    <value>The medicalRecord does not exist</value>
  </data>
  <data name="MRDeleted" xml:space="preserve">
    <value>This Medical Record is deleted</value>
  </data>
  <data name="MustUpload" xml:space="preserve">
    <value>You must upload a file or provide an image path.</value>
  </data>
  <data name="NotTheSameId" xml:space="preserve">
    <value>The id is not the same </value>
  </data>
  <data name="NoUsers" xml:space="preserve">
    <value>There are no users</value>
  </data>
  <data name="patientDoesnotHasThisAppointment" xml:space="preserve">
    <value>patient does not has this appointment</value>
  </data>
  <data name="pharmDoesnotExist" xml:space="preserve">
    <value>The pharmacist does not exist</value>
  </data>
  <data name="RoleDoctorDoesNotExist" xml:space="preserve">
    <value>Role Doctor Does Not Exist</value>
  </data>
  <data name="RoleDoesnotExist" xml:space="preserve">
    <value>This role doesn't exist</value>
  </data>
  <data name="RoleIsExist" xml:space="preserve">
    <value>The role is already exist</value>
  </data>
  <data name="RoleLabTechDoesNotExist" xml:space="preserve">
    <value>Role LabTechnician Does Not Exist</value>
  </data>
  <data name="RolePatientDoesNotExist" xml:space="preserve">
    <value>Role Patient Does Not Exist</value>
  </data>
  <data name="RolePharmacistDoesNotExist" xml:space="preserve">
    <value>Role Pharmacist Does Not Exist</value>
  </data>
  <data name="RoleReceptionistDoesNotExist" xml:space="preserve">
    <value>Role Receptionist Does Not Exist</value>
  </data>
  <data name="ScheduleIsNotExist" xml:space="preserve">
    <value>This Schedule is not Exist</value>
  </data>
  <data name="UsedBefore" xml:space="preserve">
    <value>The UserName or Email is used before</value>
  </data>
  <data name="UseDoesnotExist" xml:space="preserve">
    <value>This user doesn't exist</value>
  </data>
  <data name="UserNameUsedBefore" xml:space="preserve">
    <value>This user name is used before</value>
  </data>
  <data name="ValidUrl" xml:space="preserve">
    <value>The provided image path must be a valid URL.</value>
  </data>
  <data name="WrongPassword" xml:space="preserve">
    <value>The password is not Correct</value>
  </data>
  <data name="DocHasSpecialty" xml:space="preserve">
    <value>Doctor Already has this Specialty</value>
  </data>
  <data name="NameIsNotCorrect" xml:space="preserve">
    <value>Enter a name for Specialty</value>
  </data>
  <data name="NoSpecialtyForDoctor" xml:space="preserve">
    <value>There is no Specialties for the Doctor</value>
  </data>
  <data name="SpecialityIsExist" xml:space="preserve">
    <value>This Speciality is Exist</value>
  </data>
  <data name="SpecialityIsNotExist" xml:space="preserve">
    <value>this Speciality Is Not Exist</value>
  </data>
  <data name="IsNotADoctor" xml:space="preserve">
    <value>This User is not a Doctor</value>
  </data>
  <data name="IsNotAPatient" xml:space="preserve">
    <value>this user is not a patient</value>
  </data>
</root>